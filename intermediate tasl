{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNMK0oYBn57H/1eC23gzfyT",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Mahamoodsk/ShadowFox/blob/main/Untitled0.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rl2fe-3mAMTx",
        "outputId": "362bada3-165b-4f1c-92b8-1992254e230c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting vaderSentiment\n",
            "  Downloading vaderSentiment-3.3.2-py2.py3-none-any.whl.metadata (572 bytes)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.12/dist-packages (3.10.0)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.12/dist-packages (2.2.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.12/dist-packages (from vaderSentiment) (2.32.4)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (1.3.3)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (4.60.1)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (1.4.9)\n",
            "Requirement already satisfied: numpy>=1.23 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (2.0.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (25.0)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (11.3.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (3.2.5)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.12/dist-packages (from requests->vaderSentiment) (3.4.4)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.12/dist-packages (from requests->vaderSentiment) (3.11)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.12/dist-packages (from requests->vaderSentiment) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.12/dist-packages (from requests->vaderSentiment) (2025.10.5)\n",
            "Downloading vaderSentiment-3.3.2-py2.py3-none-any.whl (125 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m126.0/126.0 kB\u001b[0m \u001b[31m2.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: vaderSentiment\n",
            "Successfully installed vaderSentiment-3.3.2\n"
          ]
        }
      ],
      "source": [
        "!pip install vaderSentiment matplotlib pandas\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# @title Default title text\n",
        "# Import required libraries\n",
        "import pandas as pd\n",
        "from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load dataset\n",
        "data = pd.read_csv('sentiment_analysis.csv')\n",
        "\n",
        "# Show preview\n",
        "print(\"Dataset Preview:\")\n",
        "print(data.head())\n",
        "\n",
        "# Update column names if needed\n",
        "text_column = 'text'        # Change if your text column has a different name\n",
        "# date_column = 'date'        # Change if your time/date column has a different name\n",
        "\n",
        "# Convert date column to datetime\n",
        "# data[date_column] = pd.to_datetime(data[date_column], errors='coerce')\n",
        "\n",
        "# Initialize VADER analyzer\n",
        "analyzer = SentimentIntensityAnalyzer()\n",
        "\n",
        "# Function for sentiment classification\n",
        "def get_sentiment(text):\n",
        "    scores = analyzer.polarity_scores(str(text))\n",
        "    if scores['compound'] >= 0.05:\n",
        "        return 'Positive'\n",
        "    elif scores['compound'] <= -0.05:\n",
        "        return 'Negative'\n",
        "    else:\n",
        "        return 'Neutral'\n",
        "\n",
        "# Apply sentiment analysis\n",
        "data['Sentiment'] = data[text_column].apply(get_sentiment)\n",
        "\n",
        "# Count and percentage\n",
        "sentiment_counts = data['Sentiment'].value_counts()\n",
        "sentiment_percent = (sentiment_counts / len(data)) * 100\n",
        "\n",
        "# Print summary\n",
        "print(\"\\nSentiment Counts:\\n\", sentiment_counts)\n",
        "print(\"\\nSentiment Percentage (%):\\n\", sentiment_percent.round(2))\n",
        "\n",
        "# Save results\n",
        "data.to_csv('sentiment_analysis_results.csv', index=False)\n",
        "print(\"\\n✅ Results saved as 'sentiment_analysis_results.csv'\")\n",
        "\n",
        "# --- Bar Chart ---\n",
        "plt.figure(figsize=(6,4))\n",
        "plt.bar(sentiment_counts.index, sentiment_counts.values, color=['green', 'red', 'grey'])\n",
        "plt.title('Sentiment Distribution on X Posts')\n",
        "plt.xlabel('Sentiment')\n",
        "plt.ylabel('Number of Posts')\n",
        "\n",
        "for i, val in enumerate(sentiment_counts.values):\n",
        "    plt.text(i, val + 1, f\"{sentiment_percent.iloc[i]:.1f}%\", ha='center', fontweight='bold')\n",
        "\n",
        "plt.show()\n",
        "\n",
        "# --- Pie Chart ---\n",
        "plt.figure(figsize=(5,5))\n",
        "plt.pie(sentiment_counts, labels=sentiment_counts.index,\n",
        "        autopct='%1.1f%%', startangle=140,\n",
        "        colors=['green','red','grey'])\n",
        "plt.title('Overall Sentiment Trend on X')\n",
        "plt.show()\n",
        "\n",
        "# --- Time-Based Trend ---\n",
        "# Group by date and sentiment\n",
        "# trend = data.groupby([data[date_column].dt.date, 'Sentiment']).size().unstack(fill_value=0)\n",
        "\n",
        "# Plot trend over time\n",
        "# trend.plot(kind='line', figsize=(8,5), marker='o')\n",
        "# plt.title('Sentiment Trend Over Time')\n",
        "# plt.xlabel('Date')\n",
        "# plt.ylabel('Number of Posts')\n",
        "# plt.legend(title='Sentiment')\n",
        "# plt.grid(True)\n",
        "# plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "gmvFse6cAyUu",
        "outputId": "ba960ff4-6d0d-4335-8cf3-1e585f94dfb9",
        "cellView": "form"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset Preview:\n",
            "           tweet_id                                               text  \\\n",
            "0  1580000000000001  The situation in Gaza is heartbreaking. Innoce...   \n",
            "1  1580000000000002  Praying for peace and justice in Palestine. #F...   \n",
            "2  1580000000000003  Israel's actions amount to genocide, the world...   \n",
            "3  1580000000000004  Hope for a ceasefire soon to end the suffering...   \n",
            "4  1580000000000005  The conflict is complex, both sides have suffe...   \n",
            "\n",
            "  sentiment  \n",
            "0  negative  \n",
            "1  positive  \n",
            "2  negative  \n",
            "3  positive  \n",
            "4   neutral  \n",
            "\n",
            "Sentiment Counts:\n",
            " Sentiment\n",
            "Positive    44\n",
            "Negative    25\n",
            "Neutral     11\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Sentiment Percentage (%):\n",
            " Sentiment\n",
            "Positive    55.00\n",
            "Negative    31.25\n",
            "Neutral     13.75\n",
            "Name: count, dtype: float64\n",
            "\n",
            "✅ Results saved as 'sentiment_analysis_results.csv'\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-3794787264.py:56: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  plt.text(i, val + 1, f\"{sentiment_percent[i]:.1f}%\", ha='center', fontweight='bold')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e2b311ce"
      },
      "source": [
        "import pandas as pd\n",
        "\n",
        "results_df = pd.read_csv('sentiment_analysis_results.csv')\n",
        "display(results_df.head())"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a6ab29aa",
        "outputId": "b92597ae-c4f4-4811-dfd2-970f12ac3984"
      },
      "source": [
        "%%writefile sentiment_analyzer.py\n",
        "# Import required libraries\n",
        "import pandas as pd\n",
        "from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load dataset\n",
        "data = pd.read_csv('sentiment_analysis.csv')\n",
        "\n",
        "# Show preview\n",
        "print(\"Dataset Preview:\")\n",
        "print(data.head())\n",
        "\n",
        "# Update column names if needed\n",
        "text_column = 'text'        # Change if your text column has a different name\n",
        "# date_column = 'date'        # Change if your time/date column has a different name\n",
        "\n",
        "# Convert date column to datetime\n",
        "# data[date_column] = pd.to_datetime(data[date_column], errors='coerce')\n",
        "\n",
        "# Initialize VADER analyzer\n",
        "analyzer = SentimentIntensityAnalyzer()\n",
        "\n",
        "# Function for sentiment classification\n",
        "def get_sentiment(text):\n",
        "    scores = analyzer.polarity_scores(str(text))\n",
        "    if scores['compound'] >= 0.05:\n",
        "        return 'Positive'\n",
        "    elif scores['compound'] <= -0.05:\n",
        "        return 'Negative'\n",
        "    else:\n",
        "        return 'Neutral'\n",
        "\n",
        "# Apply sentiment analysis\n",
        "data['Sentiment'] = data[text_column].apply(get_sentiment)\n",
        "\n",
        "# Count and percentage\n",
        "sentiment_counts = data['Sentiment'].value_counts()\n",
        "sentiment_percent = (sentiment_counts / len(data)) * 100\n",
        "\n",
        "# Print summary\n",
        "print(\"\\nSentiment Counts:\\n\", sentiment_counts)\n",
        "print(\"\\nSentiment Percentage (%):\\n\", sentiment_percent.round(2))\n",
        "\n",
        "# Save results\n",
        "data.to_csv('sentiment_analysis_results.csv', index=False)\n",
        "print(\"\\n✅ Results saved as 'sentiment_analysis_results.csv'\")\n",
        "\n",
        "# --- Bar Chart ---\n",
        "plt.figure(figsize=(6,4))\n",
        "plt.bar(sentiment_counts.index, sentiment_counts.values, color=['green', 'red', 'grey'])\n",
        "plt.title('Sentiment Distribution on X Posts')\n",
        "plt.xlabel('Sentiment')\n",
        "plt.ylabel('Number of Posts')\n",
        "\n",
        "for i, val in enumerate(sentiment_counts.values):\n",
        "    plt.text(i, val + 1, f\"{sentiment_percent.iloc[i]:.1f}%\", ha='center', fontweight='bold')\n",
        "\n",
        "plt.show()\n",
        "\n",
        "# --- Pie Chart ---\n",
        "plt.figure(figsize=(5,5))\n",
        "plt.pie(sentiment_counts, labels=sentiment_counts.index,\n",
        "        autopct='%1.1f%%', startangle=140,\n",
        "        colors=['green','red','grey'])\n",
        "plt.title('Overall Sentiment Trend on X')\n",
        "plt.show()\n",
        "\n",
        "# --- Time-Based Trend ---\n",
        "# Group by date and sentiment\n",
        "# trend = data.groupby([data[date_column].dt.date, 'Sentiment']).size().unstack(fill_value=0)\n",
        "\n",
        "# Plot trend over time\n",
        "# trend.plot(kind='line', figsize=(8,5), marker='o')\n",
        "# plt.title('Sentiment Trend Over Time')\n",
        "# plt.xlabel('Date')\n",
        "# plt.ylabel('Number of Posts')\n",
        "# plt.legend(title='Sentiment')\n",
        "# plt.grid(True)\n",
        "# plt.show()"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing sentiment_analyzer.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "67a61b73",
        "outputId": "cf003369-fd84-4755-d547-d6f8e1b3e92a"
      },
      "source": [
        "!ls"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "sample_data\t\tsentiment_analysis_results.csv\n",
            "sentiment_analysis.csv\tsentiment_analyzer.py\n"
          ]
        }
      ]
    }
  ]
}
