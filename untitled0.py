# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w7z6iv_CcIPLRu-kNo1D4xZzqrwei6ua
"""

!pip install vaderSentiment matplotlib pandas

# @title Default title text
# Import required libraries
import pandas as pd
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
import matplotlib.pyplot as plt

# Load dataset
data = pd.read_csv('sentiment_analysis.csv')

# Show preview
print("Dataset Preview:")
print(data.head())

# Update column names if needed
text_column = 'text'        # Change if your text column has a different name
# date_column = 'date'        # Change if your time/date column has a different name

# Convert date column to datetime
# data[date_column] = pd.to_datetime(data[date_column], errors='coerce')

# Initialize VADER analyzer
analyzer = SentimentIntensityAnalyzer()

# Function for sentiment classification
def get_sentiment(text):
    scores = analyzer.polarity_scores(str(text))
    if scores['compound'] >= 0.05:
        return 'Positive'
    elif scores['compound'] <= -0.05:
        return 'Negative'
    else:
        return 'Neutral'

# Apply sentiment analysis
data['Sentiment'] = data[text_column].apply(get_sentiment)

# Count and percentage
sentiment_counts = data['Sentiment'].value_counts()
sentiment_percent = (sentiment_counts / len(data)) * 100

# Print summary
print("\nSentiment Counts:\n", sentiment_counts)
print("\nSentiment Percentage (%):\n", sentiment_percent.round(2))

# Save results
data.to_csv('sentiment_analysis_results.csv', index=False)
print("\n✅ Results saved as 'sentiment_analysis_results.csv'")

# --- Bar Chart ---
plt.figure(figsize=(6,4))
plt.bar(sentiment_counts.index, sentiment_counts.values, color=['green', 'red', 'grey'])
plt.title('Sentiment Distribution on X Posts')
plt.xlabel('Sentiment')
plt.ylabel('Number of Posts')

for i, val in enumerate(sentiment_counts.values):
    plt.text(i, val + 1, f"{sentiment_percent.iloc[i]:.1f}%", ha='center', fontweight='bold')

plt.show()

# --- Pie Chart ---
plt.figure(figsize=(5,5))
plt.pie(sentiment_counts, labels=sentiment_counts.index,
        autopct='%1.1f%%', startangle=140,
        colors=['green','red','grey'])
plt.title('Overall Sentiment Trend on X')
plt.show()

# --- Time-Based Trend ---
# Group by date and sentiment
# trend = data.groupby([data[date_column].dt.date, 'Sentiment']).size().unstack(fill_value=0)

# Plot trend over time
# trend.plot(kind='line', figsize=(8,5), marker='o')
# plt.title('Sentiment Trend Over Time')
# plt.xlabel('Date')
# plt.ylabel('Number of Posts')
# plt.legend(title='Sentiment')
# plt.grid(True)
# plt.show()

import pandas as pd

results_df = pd.read_csv('sentiment_analysis_results.csv')
display(results_df.head())

# Commented out IPython magic to ensure Python compatibility.
# %%writefile sentiment_analyzer.py
# # Import required libraries
# import pandas as pd
# from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
# import matplotlib.pyplot as plt
# 
# # Load dataset
# data = pd.read_csv('sentiment_analysis.csv')
# 
# # Show preview
# print("Dataset Preview:")
# print(data.head())
# 
# # Update column names if needed
# text_column = 'text'        # Change if your text column has a different name
# # date_column = 'date'        # Change if your time/date column has a different name
# 
# # Convert date column to datetime
# # data[date_column] = pd.to_datetime(data[date_column], errors='coerce')
# 
# # Initialize VADER analyzer
# analyzer = SentimentIntensityAnalyzer()
# 
# # Function for sentiment classification
# def get_sentiment(text):
#     scores = analyzer.polarity_scores(str(text))
#     if scores['compound'] >= 0.05:
#         return 'Positive'
#     elif scores['compound'] <= -0.05:
#         return 'Negative'
#     else:
#         return 'Neutral'
# 
# # Apply sentiment analysis
# data['Sentiment'] = data[text_column].apply(get_sentiment)
# 
# # Count and percentage
# sentiment_counts = data['Sentiment'].value_counts()
# sentiment_percent = (sentiment_counts / len(data)) * 100
# 
# # Print summary
# print("\nSentiment Counts:\n", sentiment_counts)
# print("\nSentiment Percentage (%):\n", sentiment_percent.round(2))
# 
# # Save results
# data.to_csv('sentiment_analysis_results.csv', index=False)
# print("\n✅ Results saved as 'sentiment_analysis_results.csv'")
# 
# # --- Bar Chart ---
# plt.figure(figsize=(6,4))
# plt.bar(sentiment_counts.index, sentiment_counts.values, color=['green', 'red', 'grey'])
# plt.title('Sentiment Distribution on X Posts')
# plt.xlabel('Sentiment')
# plt.ylabel('Number of Posts')
# 
# for i, val in enumerate(sentiment_counts.values):
#     plt.text(i, val + 1, f"{sentiment_percent.iloc[i]:.1f}%", ha='center', fontweight='bold')
# 
# plt.show()
# 
# # --- Pie Chart ---
# plt.figure(figsize=(5,5))
# plt.pie(sentiment_counts, labels=sentiment_counts.index,
#         autopct='%1.1f%%', startangle=140,
#         colors=['green','red','grey'])
# plt.title('Overall Sentiment Trend on X')
# plt.show()
# 
# # --- Time-Based Trend ---
# # Group by date and sentiment
# # trend = data.groupby([data[date_column].dt.date, 'Sentiment']).size().unstack(fill_value=0)
# 
# # Plot trend over time
# # trend.plot(kind='line', figsize=(8,5), marker='o')
# # plt.title('Sentiment Trend Over Time')
# # plt.xlabel('Date')
# # plt.ylabel('Number of Posts')
# # plt.legend(title='Sentiment')
# # plt.grid(True)
# # plt.show()

!ls